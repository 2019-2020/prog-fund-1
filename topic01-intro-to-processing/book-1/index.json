


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-01",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Processing PDE · drawing basic shapes · colour · grayscale · RGB</p>",
  "folder" : "book-1",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Objectives",
    "shortTitle": "Lab-01",
    "contentMd" : "#Objectives\r\n\r\nProcessing PDE · drawing basic shapes · colour · grayscale · RGB"
    },
  
    {
    "title": "#Lab advice",
    "shortTitle": "Advice",
    "contentMd" : "#Lab advice\r\n\r\n- Your labs are not a race to be the first student finished.\r\n\r\n- It is very important that you:\r\n    - take your time.\r\n    - read the instructions carefully.\r\n    - ask your lecturer to explain concepts that you don't understand; that is what we are here for!\r\n\r\n\r\n- Where code is given in labs, resist the urge to cut and paste it; maximise your learning by typing the code in.\r\n\r\n- The more mistakes you make when working through these labs, the more you learn.  If you reach the end of the lab and you haven't made any mistakes, a good learning exercise would be to try to produce syntax / logic errors and troubleshoot them. \r\n\r\n"
    },
  
    {
    "title": "#Installing the PDE (Processing Development Environment)",
    "shortTitle": "01",
    "contentMd" : "#Installing the PDE (Processing Development Environment)\r\n\r\n- If you are using your own laptop and would like to install the PDE on it, please follow the instructions in this step.\r\n- If you are using the WIT computers, you can ignore this step and move onto the next step.\r\n\r\n\r\n##Downloading the PDE\r\n\r\n- The PDE can be downloaded from https://processing.org/.  It is free, but you can choose to make a donation if you wish.\r\n\r\n![The processing website](./img/01.png)\r\n\r\n- Choose the version of the \r\n\r\n![Choose based on your operating system](./img/02.png)\r\n\r\n- A zip file will start to download.  When this file has downloaded:\r\n    - Decide where you are going to store your Programming applications on your computer.   It is a good idea to create a folder called **dev** on your **C:** and store all your applications in there.\r\n    - Unzip the downloaded processing file to your chosen location.  Note: if you don’t have unzipping software, 7-zip is a good choice and can be downloaded from here: http://www.7-zip.org/.\r\n    - You should now have a folder structure resembling this picture:\r\n\r\n![The Processing application](./img/03.png)\r\n\r\n"
    },
  
    {
    "title": "#Opening the PDE (Processing Development Environment)",
    "shortTitle": "02",
    "contentMd" : "#Opening the PDE (Processing Development Environment)\r\n\r\n#If you are using the College Computers...\r\n\r\nOpen Windows Explorer by holding down the windows key and pressing the letter E once. \r\n\r\nWhen Windows Explorer opens, double click on:\r\n\r\n- the **C:** \r\n\r\n- then the **dev** folder\r\n\r\n- then the **processing** folder\r\n\r\n- then the **processing-x.x.x** folder\r\n\r\n\r\n#If you are using your own computer...\r\n\r\nGo to the directory/folder where you installed your processing app.  \r\n\r\n\r\n#Opening the PDE\r\n\r\nNow that you have nagivated to where Processing is installed, you should see a list of files and folders similiar to the picture below:\r\n\r\n![Processing Development Environment files](./img/04.png)\r\n\r\nDouble click in the **processing** application (highlighted by the red rectangle).\r\n\r\nThe PDE (Processing Development Environment) should launch.\r\n\r\n![The Processing Development Environment](./img/05.png)\r\n\r\n"
    },
  
    {
    "title": "#Setting your Sketchbook location",
    "shortTitle": "03",
    "contentMd" : "#Setting your Sketchbook location\r\n\r\n- As you work through the exercises in this lab, you will create many new files.  These files are called Sketchbooks.\r\n- It is important that you pick a convenient location on your computer to save these sketchbook files to.  The following steps show you how to do this.\r\n\r\n##Updating your Sketchbook location\r\n\r\n- If you don't have Processing open, launch it (see the previous step for the steps involved).\r\n- From the **File**  menu, select the **Preferences** menu item.\r\n\r\n![Selecting the Preferences menu item](./img/06.png)\r\n\r\n- The following window should appear.\r\n\r\n![Enter a new sketchbook location](./img/07.png)\r\n\r\n- In the **Sketchbook location**, enter a location that is convenient to you.  If you are using:\r\n    - the college computers, it could be your G:\\ (personal networked drive that is accessible only using college computers) or a USB drive (remember to back up your work if you are using a portable drive).\r\n    - your own laptop, choose a convenient location where you will store all your programming exercises.\r\n- Click the OK button.\r\n\r\n\r\n##The Sketchbook location\r\n\r\n- All your work can now be accessed easily by selecting the **Sketchbook**  option from the **File** menu. An example of previous Sketchbook work could look like this:\r\n\r\n![Example of a Sketchbook containing previous work](./img/08.png)\r\n\r\n"
    },
  
    {
    "title": "#Drawing Simple Shapes",
    "shortTitle": "04",
    "contentMd" : "#Drawing Simple Shapes\r\n\r\n- We will use the following built-in functions to draw simple shapes:\r\n    - rect()\r\n    - line()\r\n    - ellipse()\r\n\r\n\r\n##Drawing Rectangles\r\n\r\n- The syntax of the **rect** function is:\r\n\r\n~~~   \r\n    rect(x, y, w, h)\r\n        x = x-coordinate of the upper left corner of the rectangle\r\n        y = y-coordinate of the upper left corner of the rectangle\r\n        w = width of the rectangle\r\n        h = height of the rectangle\r\n~~~\r\n\r\n- Note that, in computing, the coordinates start in the top left hand corner i.e. (0,0) is in the top left of the screen.  In the following picture, you can see the coordinates of the rectangle (1,2) along with its width (4) and height (3). \r\n\r\n![Rectangle example from www.processing.org](./img/09.png)\r\n\r\n- Enter the following code in your sketchbook:\r\n\r\n~~~\r\n    rect(20,30,50,30);\r\n~~~\r\n\r\n- Run the code, by clicking on the **play** button (highlighted in red in the screen shot below):\r\n\r\n![Running code - click on the play button](./img/11.png)\r\n\r\n- The following window should appear with a rectangle that:\r\n    - starts at the (x,y) coordinates (20,30) [measured in pixels]\r\n    - has a width of 50 pixels\r\n    - has a height of 30 pixels\r\n\r\n![Rectangle](./img/12.png)\r\n\r\n\r\n##Drawing Squares\r\n\r\n- Using the rect() function, you can draw squares. Just set the width and height to the same number of pixels.\r\n\r\n- Below the code you wrote previously, try drawing a square that has starts at the (x,y) coordinates of (40,5) and has a length of 20.  \r\n\r\n- Run the code.  Did a square appear?\r\n\r\n![Rectangle and square](./img/13.png)\r\n\r\n\r\n##Drawing Lines\r\n\r\n- The syntax of the **line** function is:\r\n\r\n~~~\r\n    line(x1, y1, x2, y2)\r\n        x1 = x-coordinate of first point\r\n        y1 = y-coordinate of first point\r\n        x2 = x-coordinate of second point\r\n        y2 = y-coordinate of second point\r\n~~~\r\n\r\n- In the following picture, you can see an example of a line. \r\n\r\n![Line example from www.processing.org](./img/14.png)\r\n\r\n- Enter the following code in your open sketchbook:\r\n\r\n~~~\r\n    line(5,30,20,90);\r\n~~~\r\n\r\n- When you run the code, you should see the following line that starts at (5,30) and ends at (20,90):\r\n\r\n![Drawing a line](./img/15.png)\r\n"
    },
  
    {
    "title": "#Drawing Simple Shapes(contd.)",
    "shortTitle": "05",
    "contentMd" : "#Drawing Simple Shapes(contd.)\r\n\r\n\r\n##Drawing Ellipses\r\n\r\n- For our purposes here, we will define an **ellipse** as a basic oval shape. \r\n\r\n- The syntax of the **ellipse** function is:\r\n\r\n~~~\r\n    ellipse(x, y, w, h)\r\n        x = x-coordinate at the centre of the ellipse\r\n        y = y-coordinate at the centre of the ellipse\r\n        w = width of the ellipse\r\n        h = height of the ellipse\r\n~~~\r\n\r\n- In the following picture, you can see an example of an ellipse. \r\n\r\n![Ellipse example from www.processing.org](./img/16.png)\r\n\r\n- Enter the following code in your open sketchbook:\r\n\r\n~~~java\r\n    ellipse(85,50,20,60);\r\n~~~\r\n\r\n- When you run the code, you should see the following ellipse whose centre is (85,50) and is 20 pixels wide and 90 high.\r\n\r\n![Drawing an ellipse](./img/17.png)\r\n\r\n\r\n##Drawing Circles\r\n\r\n- Using the ellipse() function, you can draw circles. Just set the width and height to the same number of pixels.\r\n\r\n- Try drawing a cicle that has the coordinates (50,80) at its centre and has a diameter of 15 pixels.\r\n\r\n- Run the code.  Did a circle appear?\r\n\r\n![Drawing a circle](./img/18.png)\r\n\r\n"
    },
  
    {
    "title": "#Changing the look of the display window",
    "shortTitle": "06",
    "contentMd" : "#Changing the look of the display window\r\n\r\n- You should have the following code in your open sketchbook:\r\n\r\n~~~java\r\n\trect(20,30,50,30);\r\n\trect(40,5,20,20);\r\n\tline(5,30,20,90);\r\n\tellipse(85,50,20,60);\r\n    ellipse(50,80,15,15);\r\n~~~\r\n\r\n- When it runs, you should have something that looks like this:\r\n\r\n![Output so far](./img/18.png)\r\n\r\n- We can see that the available space in the window is at a minimum and the window is quite small.  There background is also a default light grey colour.  We will make changes to this code to make the window larger and change the colour.\r\n\r\n\r\n##size() function\r\n\r\n- The size() function sets the size of the display window in pixels.  It has to be the first line of code in your sketchbook (there is an exception to this that we will cover later).  \r\n\r\n- The syntax of the **size** function is:\r\n\r\n~~~\r\n    size(w, h)\r\n        w = width of the ellipse\r\n        h = height of the ellipse\r\n~~~\r\n\r\n- If the size function is not called, the window will be set to a default size of 100x100 pixels.\r\n\r\n- Enter the following code in your open sketchbook (as the first line of code):\r\n\r\n~~~\r\n    size(400,300);\r\n~~~\r\n\r\n- Run your code; your window should now be larger.\r\n\r\n![Output so far](./img/18a.png)\r\n\r\n\r\n##background() function\r\n\r\n- The background() function sets the background colour of the display window. \r\n\r\n- The syntax of the Grayscale **background** function is:\r\n\r\n~~~\r\n    background(g)\r\n        g = gray colour   (a number between 0 and 255 inclusive) \r\n\r\n        0 is black and 255 is white.  All numbers in between vary in shades of gray.\r\n~~~\r\n\r\n\r\n- In your open sketchbook (after the size() function), type in the background() function, passing a value between 0 and 255 as your colour parameter.\r\n\r\n- For example, we chose a dark-ish grey:  \r\n\r\n~~~\r\n    background(100);\r\n~~~\r\n   \r\n![Setting the size and colour of the display window](./img/19.png)\r\n\r\n\r\n##Saving your work\r\n\r\nIt is a good idea to save your work as you progress through your labs.  From the **File** menu (**Processing** on the Mac), select **Save As..**.  The folder location you chose earlier for storing your sketches should be displayed.  Maybe adopt this naming scheme for saving your processing labs for the rest of the semester:\r\n\r\n- labXX_stepXX\r\n- labXX_exerciseXX\r\n- labXX_ challengeXX\r\n\r\nwhere XX is the lab, step exercise, or challenge number.\r\n\r\n\r\n\r\n"
    },
  
    {
    "title": "#Changing the look of the shapes",
    "shortTitle": "07",
    "contentMd" : "#Changing the look of the shapes\r\n\r\nIn this step, we will look at colouring in the shapes we have just drawn and also changing their outline.\r\n\r\n\r\n##fill() function\r\n\r\nThe fill() function fills shapes with a chosen colour.  We will use the RGB colours to select a colour.  All shapes that are drawn after the **fill** function is called, will be filled with the chosen colour.  \r\n\r\nThe syntax of the RGB **fill** function is similar to the **background** function and is:\r\n\r\n~~~\r\n    fill(r,g,b)\r\n        r = red colour (a whole number between 0 and 255 inclusive)\r\n        g = green colour (a whole number between 0 and 255 inclusive)\r\n        b = blue colour (a whole number between 0 and 255 inclusive)\r\n~~~\r\n\r\nIn your open sketchbook, enter the following code just before you draw any shapes:\r\n\r\n~~~\r\n    fill(100,150,70);\r\n~~~\r\n\r\nRun your code; all your shapes should be coloured dark green.\r\n\r\n![Shapes filled with dark green colours](./img/20.png)\r\n\r\nNow we will set the ellipses to be a different colour i.e. light green.  Enter the following code before your first ellipse() function call.\r\n\r\n~~~\r\n    fill(200,250,70);\r\n~~~\r\n\r\n![Shapes filled with light and dark green colours](./img/21.png)\r\n\r\n\r\n##Order of statements matter\r\n\r\nNote how the order of statements matter.  All shapes drawn after the first fill() function is called are coloured dark green.  All shapes drawn after the second fill() function is called are coloured light green.\r\n\r\nTry moving the first ellipse() function call **before** the second fill() function call.  What happened?  Only the second ellipse is coloured light green.   \r\n\r\nMove the ellipse function back to it's original location so both ellipses are coloured light green.\r\n\r\n\r\n##noStroke() function\r\n\r\nA **stroke** is the outline of a shape.  The noStroke() function disables the outline on shapes that are drawn after the function is called.  \r\n\r\nIn your open sketchbook, enter the following code before your draw any shapes:\r\n\r\n~~~\r\n    noStroke();\r\n~~~\r\n\r\nWhen you run your code, you should have something similar to this:\r\n\r\n![Shapes filled, but with no stroke](./img/22.png)\r\n \r\n\r\n##stroke() function\r\n\r\nThe stroke() function enables the outline on shapes that are drawn after the function is called.  When you call stroke(), you need to specify a colour.\r\n\r\nThe syntax of the **stroke** function is also similar to the **fill** and **background** function and is:\r\n\r\n~~~\r\n    stroke(r,g,b)\r\n        r = red colour (a whole number between 0 and 255 inclusive)\r\n        g = green colour (a whole number between 0 and 255 inclusive)\r\n        b = blue colour (a whole number between 0 and 255 inclusive)\r\n~~~\r\n\r\nIf we wanted **all** shapes **except** the first ellipse (the oval) to have a stroke, you should make the following changes:\r\n\r\n- remove the call to **noStroke()** that you just put into your code.\r\n- call **noStroke()** before the first ellipse is drawn.\r\n- call **stroke(0,0,0)** before the second ellipse is drawn to enable a black stroke on the second ellipse.\r\n\r\nYour output should look similar to this:\r\n\r\n![Shapes filled - noStroke on the oval](./img/23.png)\r\n\r\n\r\n##strokeWeight() function\r\n\r\nThe strokeWeight() function allows you to choose the thickness of a line/outline on shapes.  The chosen thickness will apply to all lines/shapes that are drawn after the function is called.  The thickness is specified in pixels and the default thickness is 1 pixel.\r\n\r\nIf we wanted **all** shapes to have thickness of 3 pixels, enter the following code before you draw any of the shapes:\r\n\r\n~~~\r\n    strokeWeight(3);\r\n~~~\r\n\r\nYour output should look similar to this:\r\n\r\n![Playing with stroke weight](./img/24.png)\r\n\r\n##Code so far\r\n\r\nThe code that produced the above screen shot is below.  You will be using this as a starting point for Exercise 1:\r\n\r\n~~~java\r\nsize(400,300);\r\nbackground(100); \r\n\r\nstrokeWeight(3);\r\n\r\nfill(100,150,70);\r\nrect(20,30,50,30);\r\nrect(40,5,20,20);\r\nline(5,30,20,90);\r\nfill(200,250,70);\r\n\r\nnoStroke();\r\nellipse(85,50,20,60);\r\nstroke(0,0,0);\r\nellipse(50,80,15,15);\r\n~~~\r\n\r\n\r\n"
    },
  
    {
    "title": "#Exercises",
    "shortTitle": "Exercises",
    "contentMd" : "#Exercises\r\n\r\n- These exercises are based on the functions we covered in the previous steps in this lab.\r\n\r\n- For each exercise listed below, create a new sketchbook.\r\n\r\n\r\n##Exercise 1\r\n\r\nAt the end of the previous step, your animation looked like this:\r\n\r\n![](./img/24.png)\r\n\r\nMake the necessary changes so your animation now looks like this image:\r\n\r\n![](./img/25.png)\r\n\r\n\r\n##Exercise 2\r\n\r\n- Draw a stick man as shown in the picture below:\r\n\r\n![Basic Stick Man](./img/26.png)\r\n\r\n\r\n##Exercise 3\r\n\r\nReplicate the basic Microsoft logo as shown in the picture below:\r\n\r\n![Basic Microsoft Logo](./img/27.png)\r\n\r\nHint:  You could use [this website](http://designpieces.com/2014/11/brand-colours/) to find the exact Microsoft RGB colours in their logo.\r\n\r\n\r\n##Exercise 4\r\n\r\nConvert the Microsoft logo into a grayscale logo as shown in the picture below:\r\n\r\n![Greyscale version of the Microsoft logo](./img/28.png)\r\n\r\nHint: the easiest way to do this is to use the grayscale **fill** function as opposed to the RBG version of it.  The grayscale version of **fill** takes one parameter, a number between 0 and 255 inclusive.  This numver represents a shade of gray between black (0) and white (255) e.g.:\r\n\r\n~~~\r\n    fill(150);   //sets a medium gray colour for all shapes drawn after it\r\n    fill(0);     //sets a black colour for all shapes drawn after it\r\n    fill(255);   //sets a white colour for all shapes drawn after it\r\n~~~ \r\n\r\n"
    },
  
    {
    "title": "#Challenges",
    "shortTitle": "Challenges",
    "contentMd" : "#Challenges\r\n\r\n- For each challenge listed below, create a new sketch.\r\n\r\n- In this module, the **Challenge Exercises** are exactly that...challenges!  So if you can't do them straight away (or at all), don't panic.  In most cases, they require additional thinking and research.  You may need to visit the [Processing website](https://processing.org/reference/) for additional information to attempt them.\r\n\r\n- Note that sequence the shapes are drawn in these challenges matters!\r\n\r\n\r\n##Challenge 1\r\n\r\nReplicate the beats (Dr. Dre) logo as shown in the picture below:\r\n\r\n![Dr. Dre logo](./img/29.png)\r\n\r\n\r\n\r\n##Challenge 2\r\n\r\nWrite the code that will draw the typical control buttons you would see on a media player.  An example image would be:\r\n\r\n![Media player controls](./img/30.png)\r\n\r\nHint: you will need to read up on the triangle() function on the [Processing website](https://processing.org/reference/triangle_.html).\r\n\r\n\r\n##Challenge 3\r\n\r\nDesign your own picture, making sure to use combinations of Circles, Ovals, Squares, Rectanges and Lines.  \r\n\r\n\r\n"
    },
  
    {
    "title": "#Solutions",
    "shortTitle": "Solutions",
    "contentMd" : "#Solutions\r\n\r\nThe solutions for this lab can be found [here](archives/lab01_solutions.zip). \r\n\r\nIf you require unzipping software, 7zip is a good choice: <http://www.7-zip.org/> (or Keka for Mac <http://www.kekaosx.com/en/>)\r\n\r\nAfter unzipping the solutions, it might be a good idea to copy the three folders to your **sketchbook** folder.  From Processing, you could then use **File**, followed by **Sketchbook** to easily open them.\r\n"
    }
  
  ]
  }

